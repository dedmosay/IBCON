{"version":3,"sources":["Model/Model.js","TreeScene.js","App.js","reportWebVitals.js","index.js"],"names":["Model","props","fbx","useFBX","url","mesh","useRef","useState","active","setActive","ref","rotation","Math","PI","position","onClick","event","object","scale","ThreeScene","className","shadows","dpr","camera","fov","intensity","color","fallback","OrbitControls","Environment","preset","background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAoBeA,EAjBD,SAACC,GACX,IAAMC,EAAMC,YAAOF,EAAMG,KACnBC,EAAOC,mBACb,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,OACI,gDACQR,GADR,IAEIS,IAAKL,EACLM,SAAU,CAACC,KAAKC,IAAM,EAAG,EAAG,GAC5BC,SAAUN,EAAS,CAAC,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,GACtCO,QAAS,SAACC,GAAD,OAAWP,GAAWD,IALnC,SAOI,2BAAWS,OAAQf,EAAKgB,MAAO,U,MCP5B,SAASC,IACtB,OACE,qBAAKC,UAAU,aAAf,SACE,eAAC,IAAD,CAAQC,SAAO,EAACC,IAAK,CAAC,EAAG,GAAIC,OAAQ,CAAET,SAAU,CAAC,EAAG,EAAG,GAAIU,IAAK,IAAjE,UACE,8BAAcC,UAAW,KACzB,4BAAYX,SAAU,EAAE,GAAI,EAAG,GAAIY,MAAM,SAASD,UAAW,KAC7D,4BAAYX,SAAU,CAAC,EAAG,GAAI,IAAKY,MAAM,OAAOD,UAAW,MAC3D,eAAC,WAAD,CAAUE,SAAU,KAApB,UACE,cAAC,EAAD,CAAOvB,IAAI,4FAAsBU,SAAU,CAAC,EAAG,EAAG,KAClD,cAAC,EAAD,CAAOV,IAAI,uBAAuBU,SAAU,CAAC,EAAG,EAAG,KACnD,kCAAkBY,MAAM,MAAMZ,SAAU,CAAC,EAAG,EAAG,KAC/C,cAACc,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAaC,OAAO,OAAOC,YAAU,YCThCC,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAACD,EAAD,OCMSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ca99bbd.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { useFBX } from \"@react-three/drei\";\n\nconst Model = (props) => {\n    const fbx = useFBX(props.url);\n    const mesh = useRef()\n    const [active, setActive] = useState(false)\n    return (\n        <mesh\n            {...props}\n            ref={mesh}\n            rotation={[Math.PI / -2, 0, 0]}\n            position={active ? [0, 0, 0] : [0, 1, 0]}\n            onClick={(event) => setActive(!active)}\n        >\n            <primitive object={fbx} scale={0.02} />\n        </mesh>\n    );\n};\n\nexport default Model;\n","import { Environment, OrbitControls } from \"@react-three/drei\";\nimport { Suspense } from \"react\";\nimport React from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport Model from './Model/Model'\nimport \"./styles.css\";\n\n\nexport default function ThreeScene() {\n  return (\n    <div className=\"ThreeScene\">\n      <Canvas shadows dpr={[1, 2]} camera={{ position: [0, 3, 7], fov: 50 }}>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[-10, 0, 0]} color=\"yellow\" intensity={20} />\n        <pointLight position={[0, 10, 10]} color=\"blue\" intensity={1.5} />\n        <Suspense fallback={null}>\n          <Model url=\"/ТестоваяМодель.fbx\" position={[0, 0, 0]} />\n          <Model url=\"/roof_expierence.fbx\" position={[0, 0, 0]} />\n          <directionalLight color=\"red\" position={[0, 0, 5]} />\n          <OrbitControls />\n          <Environment preset=\"park\" background />\n        </Suspense>\n      </Canvas>\n    </div>\n  );\n}\n","import './App.css';\nimport ThreeScene from './TreeScene';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThreeScene/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}